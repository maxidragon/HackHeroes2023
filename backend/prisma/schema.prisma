// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id                   Int                   @id @default(autoincrement())
  email                String                @unique
  username             String?
  firstName            String?
  lastName             String?
  schoolClass          String?
  schoolName           String?
  password             String
  description          String?
  avatar               Bytes?
  banner               Bytes?
  loginID              Int?
  restURL              RestURL?              @relation(fields: [restURLId], references: [id])
  restURLId            Int?
  certificate          String?               @db.LongText
  fingerprint          String?               @db.LongText
  privateKey           String?               @db.LongText
  firebaseToken        String?               @db.LongText
  TODO                 Todo[]
  PasswordResetRequest PasswordResetRequest?
  FlashCardSet         FlashCardSet[]
}

model RestURL {
  id    Int    @id @default(autoincrement())
  url   String @unique
  users User[] @relation()
}

model Todo {
  id        Int      @id @default(autoincrement())
  text      String
  done      Boolean  @default(false)
  userId    Int?
  user      User?    @relation(fields: [userId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model PasswordResetRequest {
  hash   String @id
  userId Int    @unique
  user   User   @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model FlashCardSet {
  id          Int                @id @default(autoincrement())
  title       String
  description String?
  cards       FlashCard[]
  user        User?              @relation(fields: [userId], references: [id])
  userId      Int?
  publicity   FlashCardPublicity
  createdAt   DateTime           @default(now())
  updatedAt   DateTime           @updatedAt
}

model FlashCard {
  id        Int                @id @default(autoincrement())
  question  String
  answer    String
  set       FlashCardSet?      @relation(fields: [setId], references: [id])
  setId     Int?
  createdAt DateTime           @default(now())
  updatedAt DateTime           @updatedAt
}

enum FlashCardPublicity {
  PUBLIC
  PRIVATE
  CLASS
}
